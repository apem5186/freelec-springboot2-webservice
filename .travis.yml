language: java
jdk:
  - openjdk8

# access 권한 추가
before_install:
  - cd freelec-springboot2-webservice/
  - chmod +x gradlew

# 오직 master 브랜치에 push될 때만 Travis CI를 수행
branches:
  only:
    - master


# Travis CI 서버의 Home
# gradle을 통해 의존성을 받게 되면 이를 해당 디렉토리에 캐시하여, 같은 의존성은
# 다음 배포때부터 다시 받지 않도록 설정
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# master 브랜치에 푸시되었을 때 수행하는 명령어
script: "./gradlew clean build"

# CodeDeploy는 Jar 파일을 인식 못하므로 Jar+기타 설정 파일들을 모아 압축한다.
before_deploy:
  - zip -r freelec-springboot2-webservice * # 현재 위치의 모든 파일을 freelec-springboot2-webservice의 이름으로 압축한다.
  - mkdir -p deploy # deploy라는 디렉토리를 Travis CI가 실행중인 위치에서 생성한다.
  - mv freelec-springboot2-webservice.zip deploy/freelec-springboot2-webservice.zip
  # freelec-springboot2-webservice.zip 파일을 deploy/freelec-springboot2-webservice.zip으로 이동

# S3로 파일 업롤드 혹은 CodeDeploy로 배포 등 외부 서비스와 연동될 행위들을 선언한다.
deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY  # Travis repo settings에 설정된 값

    secret_access_key: $AWS_SECRET_KEY  # Travis repo settings에 설정된 값

    bucket: freelec-springboot-build-zip
    region: ap-northeast-2
    skip_cleanup: true
    acl: private
    local_dir: deploy # 앞에서 생성한 deploy 디렉토리를 지정한다, 해당 위치의 파일들만 S3로 전송한다.
    wait-until-deployed: true

  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY  # Travis repo settings에 설정된 값

    secret_access_key: $AWS_SECRET_KEY  # Travis repo settings에 설정된 값

    bucket: freelec-springboot-build-zip  # S3 버킷
    key: freelec-springboot2-webservice.zip # 빌드 파일을 압축해서 전달
    bundle_type: zip
    application: freelec-springboot2-webservice # 웹 콘솔에서 등록한 CodeDeploy 애플리케이션

    deployment_group: freelec-springboot2-webservice-group  # 웹 콘솔에서 등록한 CodeDeploy 배포 그룹
    region: ap-northeast-2
    wait-until-deployed: true

# CI 실행 완료 시 메일로 알람.
notifications:
  email:
    recipients:
      - apem5186@naver.com